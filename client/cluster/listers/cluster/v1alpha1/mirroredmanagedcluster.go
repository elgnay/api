// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/open-cluster-management/api/cluster/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MirroredManagedClusterLister helps list MirroredManagedClusters.
type MirroredManagedClusterLister interface {
	// List lists all MirroredManagedClusters in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MirroredManagedCluster, err error)
	// MirroredManagedClusters returns an object that can list and get MirroredManagedClusters.
	MirroredManagedClusters(namespace string) MirroredManagedClusterNamespaceLister
	MirroredManagedClusterListerExpansion
}

// mirroredManagedClusterLister implements the MirroredManagedClusterLister interface.
type mirroredManagedClusterLister struct {
	indexer cache.Indexer
}

// NewMirroredManagedClusterLister returns a new MirroredManagedClusterLister.
func NewMirroredManagedClusterLister(indexer cache.Indexer) MirroredManagedClusterLister {
	return &mirroredManagedClusterLister{indexer: indexer}
}

// List lists all MirroredManagedClusters in the indexer.
func (s *mirroredManagedClusterLister) List(selector labels.Selector) (ret []*v1alpha1.MirroredManagedCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MirroredManagedCluster))
	})
	return ret, err
}

// MirroredManagedClusters returns an object that can list and get MirroredManagedClusters.
func (s *mirroredManagedClusterLister) MirroredManagedClusters(namespace string) MirroredManagedClusterNamespaceLister {
	return mirroredManagedClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MirroredManagedClusterNamespaceLister helps list and get MirroredManagedClusters.
type MirroredManagedClusterNamespaceLister interface {
	// List lists all MirroredManagedClusters in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.MirroredManagedCluster, err error)
	// Get retrieves the MirroredManagedCluster from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.MirroredManagedCluster, error)
	MirroredManagedClusterNamespaceListerExpansion
}

// mirroredManagedClusterNamespaceLister implements the MirroredManagedClusterNamespaceLister
// interface.
type mirroredManagedClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MirroredManagedClusters in the indexer for a given namespace.
func (s mirroredManagedClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MirroredManagedCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MirroredManagedCluster))
	})
	return ret, err
}

// Get retrieves the MirroredManagedCluster from the indexer for a given namespace and name.
func (s mirroredManagedClusterNamespaceLister) Get(name string) (*v1alpha1.MirroredManagedCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("mirroredmanagedcluster"), name)
	}
	return obj.(*v1alpha1.MirroredManagedCluster), nil
}
